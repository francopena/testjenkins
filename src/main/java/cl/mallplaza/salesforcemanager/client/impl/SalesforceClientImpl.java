package cl.mallplaza.salesforcemanager.client.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import cl.mallplaza.salesforcemanager.client.SalesforceClient;
import cl.mallplaza.salesforcemanager.dto.SalesforceResponseDetailDto;
import cl.mallplaza.salesforcemanager.dto.SendMailSalesforceRequestDto;
import cl.mallplaza.salesforcemanager.dto.SendMailSalesforceResponseDto;
import cl.mallplaza.salesforcemanager.dto.TokenSalesforceRequestDto;
import cl.mallplaza.salesforcemanager.dto.TokenSalesforceResponseDto;
import cl.mallplaza.salesforcemanager.exception.HttpStatusBadRequestSalesforceException;
import cl.mallplaza.salesforcemanager.exception.HttpStatusForbiddenSalesforceException;
import cl.mallplaza.salesforcemanager.exception.SalesforceClientException;
import lombok.extern.slf4j.Slf4j;
/**	 
 * Class for handling requests to the salesforce mass mailing service provider,
 * for optimal operation it requires the injection of an instance of RestTemplate 
 * and another of TokenSalesforceRequestDto, in addition to two variables in the 
 * properties file.
 * <p>This property refers to the electronic address where the token generation 
 * requests of the supplier are made
 * <pre class="code">
 * properties.salesforce.token.url
 * </pre>
 * <p>This property refers to the electronic address where the requests are made 
 * to the provider for sending mail
 * <pre class="code">
 * properties.salesforce.mail.send.url
 * </pre>
 * 
 * @since 1.0
 * 
 * @author Juan Manuel Vasquez - Zenta
 * 	
 * @version 26/08/2019
 */
@Slf4j
@Component
public class SalesforceClientImpl implements SalesforceClient {

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private TokenSalesforceRequestDto requestToken;
	
	@Value("${properties.salesforce.token.url}")
	private String urlToken;
	
	@Value("${properties.salesforce.mail.send.url}")
	private String sendUrl;
	
	/**
	 * Method to obtain the token from salesforce, for making requests to the Salesforce mass mail service provider.
	 *
	 * @return TokenSalesforceResponseDto
	 * 
	 * @throws HttpStatusForbiddenSalesforceException Caused mainly because the credential data is incorrect or the 
	 * user does not have the associated permissions.
	 * 
	 * @throws InternalError Caused by an unknown error at the time of making the request to the 
	 * service provider.
	 * 
	 * @since 1.0
	 * 
	 * @author Juan Manuel Vasquez - Zenta
	 * 	
	 * @version 26/08/2019
	 */
	@Override
	public TokenSalesforceResponseDto getSalesforceToken() {
		log.info("[SalesforceClientImpl] - start getting the token.");
		
		HttpHeaders headers = new HttpHeaders();
		headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<TokenSalesforceRequestDto> requestEntity= new HttpEntity<>(requestToken, headers);
		
		ResponseEntity<TokenSalesforceResponseDto> response = null; 
		try {
			response = restTemplate.exchange(urlToken, HttpMethod.POST, requestEntity, TokenSalesforceResponseDto.class);	
		} catch (HttpClientErrorException e) {
			log.error("[SalesforceClientImpl][getSalesforceToken] - Not authorized.");
			throw new HttpStatusForbiddenSalesforceException("403","[SalesforceClientImpl][getSalesforceToken] - Not authorized.", e);
		} catch (Exception e) {
			throw new InternalError("[SalesforceClientImpl] - unknown error getting token.", e);
		}

		return response.getBody();
	}

	/**
	 * Method that is responsible for creating the request for sending mail, and executing the request, 
	 * in addition to processing the response and creating the filtered return.
	 *
	 * @param requestDto of type {@link SendMailSalesforceRequestDto}
	 * 
	 * @param token of type String
	 * 
	 * @param tokenType of type String
	 *
	 * @return {@link SendMailSalesforceResponseDto}
	 * 
	 * @throws HttpStatusBadRequestSalesforceException This indicates that the request to 
	 * salesforce is poorly constructed, or there is a missing parameter.
	 * 
	 * @throws SalesforceClientException Referring to an error generated by the service provider side, 
	 * an error occurred which did not allow the mail to be sent.
	 * 
	 * @throws InternalError Caused by an unknown error at the time of making the request to the 
	 * service provider.
	 * 
	 * @since 1.0
	 * 
	 * @author Juan Manuel Vasquez - Zenta
	 * 	
	 * @version 26/08/2019
	 */
	@Override
	public SendMailSalesforceResponseDto sendMail(SendMailSalesforceRequestDto requestDto, String token, String tokenType, String templateId) {
		log.info("[SalesforceClientImpl] - sending mail....");

		StringBuilder headerToken = new StringBuilder("");
		headerToken.append(tokenType).append(" ").append(token);
		
		HttpHeaders headers = new HttpHeaders();
		headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);
		headers.add(HttpHeaders.AUTHORIZATION, headerToken.toString());
		HttpEntity<SendMailSalesforceRequestDto> requestEntity= new HttpEntity<>(requestDto, headers);
		
		ResponseEntity<SendMailSalesforceResponseDto> response = null; 
		try {
			response = restTemplate.exchange(constructUrlSendMail(templateId), HttpMethod.POST, requestEntity, SendMailSalesforceResponseDto.class);	
		} catch (HttpClientErrorException e) {
			log.error("[SalesforceClientImpl] - Error sending mail.");
			throw new HttpStatusBadRequestSalesforceException(String.valueOf(e.getStatusCode().value()), "Error sending mail.", e);
		} catch (Exception e) {
			throw new InternalError("unknown error sent mail.", e);
		}
		
		if(response != null && response.getBody() != null && response.getBody().getResponses() != null) {
			List<SalesforceResponseDetailDto> bodyDetalis = response.getBody().getResponses();
			SalesforceResponseDetailDto responseError= bodyDetalis.stream().filter(detail -> detail.getHasErrors().equals(true)).findAny().orElse(null);
			if(responseError != null) {
				log.error("[SalesforceClientImpl] - Error sending Mail. Mail not sent.".concat(responseError.getMessages().get(0)));
				throw new SalesforceClientException("Error sending Mail. Mail not sent.".concat(responseError.getMessages().get(0)));
			}
		} else {
			log.error("[SalesforceClientImpl] - Error sending Mail. Mail not sent.");
			throw new SalesforceClientException(" Error sending Mail. Mail not sent.");
		}
		
		log.info("[SalesforceClientImpl] - Mail Sended Success....");
		return response.getBody();
	}
	
	private String constructUrlSendMail(String templateId) {
		StringBuilder url = new StringBuilder(sendUrl);
		url.append("/key:").append(templateId).append("/send");
		return url.toString();
	}
}
